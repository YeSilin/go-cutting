// 各种折屏的快捷裁剪实现

//var str = "js实现用{two}自符串替换占位符{two} {three}  {one} ".format({one: "I",two: "LOVE",three: "YOU"});
//var str2 = "js实现用{1}自符串替换占位符{1} {2}  {0} ".format("I","LOVE","YOU");
String.prototype.format = function () {
    if (arguments.length == 0) return this;
    var param = arguments[0];
    var s = this;
    if (typeof (param) == 'object') {
        for (var key in param)
            s = s.replace(new RegExp("\\{" + key + "\\}", "g"), param[key]);
        return s;
    } else {
        for (var i = 0; i < arguments.length; i++)
            s = s.replace(new RegExp("\\{" + i + "\\}", "g"), arguments[i]);
        return s;
    }
};


// 定义一个函数用来设置黑边
function addEdge() {
    // 保存当前背景颜色
    var nowColor = app.backgroundColor;

    // 定义一个对象颜色是黑色
    var black = new SolidColor();
    black.rgb.hexValue = "d5d5d5";
    app.backgroundColor = black;

    // 获取当前文档的高度与宽度
    var width = app.activeDocument.width + 0.1;
    var height = app.activeDocument.height + 0.1;

    // 重设画布大小
    app.activeDocument.resizeCanvas(UnitValue(width), UnitValue(height), AnchorPosition.MIDDLECENTER);

    // 恢复之前的背景颜色
    app.backgroundColor = nowColor;
}


// 创建一个透明图层
function createLayer() {
    // 新建一个图层
    function layer() {
        app.activeDocument.artLayers.add().name = "注意：已快捷裁剪成功！";
    }

    // 生成历史记录
    app.activeDocument.suspendHistory("注意：已快捷裁剪成功！", "layer()");
}


// 清理元数据
function deleteDocumentAncestorsMetadata() {
    // 清理元数据四步骤
    if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject("lib:AdobeXMPScript");
    var xmp = new XMPMeta(activeDocument.xmpMetadata.rawData);
    // Begone foul Document Ancestors!
    xmp.deleteProperty(XMPConst.NS_PHOTOSHOP, "DocumentAncestors");
    app.activeDocument.xmpMetadata.rawData = xmp.serialize();
}


// 合并图层用于提速
function speedUp() {
    // 设置首选项新文档预设单位是厘米，PIXELS是像素
    app.preferences.rulerUnits = Units.CM;
    // 新建一个空白图层用于合并
    app.activeDocument.artLayers.add();
    // 合并全部可见图层
    app.activeDocument.mergeVisibleLayers();
    // 转为背景图层不然添加黑边会无效
    app.activeDocument.activeLayer.isBackgroundLayer = true
}

//  返回上一级函数
function returnUpper() {
    // 为历史定义的变量
    var idslct = charIDToTypeID("slct");
    var idnull = charIDToTypeID("null");
    var idHstS = charIDToTypeID("HstS");
    var idOrdn = charIDToTypeID("Ordn");
    var idPrvs = charIDToTypeID("Prvs");

    // 返回上一级历史
    var ref = new ActionReference();
    var desc = new ActionDescriptor();
    ref.putEnumerated(idHstS, idOrdn, idPrvs);
    desc.putReference(idnull, ref);
    executeAction(idslct, desc, DialogModes.NO);
}


//  获取用户想要保存的位置加文件名
function getPathName(saveName) {
    // 裁剪之后进行保存的位置和你想要的默认名称
    var tempFile = new File("~/Desktop/GoCutting/" + saveName);
    // 返回带路径的名字，注意要先数字解码
    return decodeURI(tempFile.saveDlg("优化另存为",["不要带扩展名:*","默认保存为 JPG 文件:*"]))
}


// 这是负责裁剪另存的函数
function optimized(x1, y1, x2, y2, savePath) {
    var bounds = [x1, y1, x2, y2];
    app.activeDocument.crop(bounds, 0);

    if (BlackEdge) {
        // 添加黑边
        addEdge();
    }

    // 裁剪之后进行保存的位置和你想要的默认名称
    var TmpFile = new File(savePath);

    // saveAs( 文件, 选项, 作为副本, 扩展名大小写 )
    //调用[document]的[saveAs]另存方法，使用上面设置的各种参数，将当前文档导出并转换为JPEG格式的文档。
    app.activeDocument.saveAs(TmpFile, exportOptionsSave, true, Extension.LOWERCASE);
}


// 主函数
function main() {
    // 得到用户想要保存的位置
    var userSavePath = getPathName("请输入订单编号");
    // 没有得到路径就返回
    if (userSavePath == "null") {
        return
    }

    // 得到最终会保存出来的文件名
    var fileNameArr = new Array();
    for (var i = 0; i < num; i++) {
        fileNameArr[i] = "{0}_{1}_{2}-{3}_".format(userSavePath, singleName, i + 1, num) + width + "x" + height;
    }

    // 遍历全部可能覆盖的文件名
    for (var i = 0; i < fileNameArr.length; i++) {
        // 避免覆盖已保存的文件
        if (new File(fileNameArr[i] + ".jpg").exists) {
            alert("输入的编号重复，已自动取消操作！");
            return
        }
    }

    // 生成历史记录并调用函数
    app.activeDocument.suspendHistory("性能加速", "speedUp()");

    // 清除元数据
    deleteDocumentAncestorsMetadata();

    // 开始自动保存文件
    for (var i = 0; i < num; i++) {
        // 生成历史记录并调用函数
        app.activeDocument.suspendHistory("优化另存为", "optimized(width*i, 0, width*(i+1), height, fileNameArr[i])");

        // 返回上一级历史
        returnUpper();
    }

    // 全部保存成功
    isSave = true;
}


// 判断是否有打开的文件
if (!documents.length) {
    alert("没有打开的文档，请打开一个文档来运行此脚本！");
} else {
    // 定义一个变量[exportOptionsSave]，用来表示导出文档为jpeg格式的设置属性。
    var exportOptionsSave = new JPEGSaveOptions();

    // 嵌入彩色配置文件
    exportOptionsSave.embedColorProfile = true;

    // 设置杂边为无
    exportOptionsSave.matte = MatteType.NONE;

    //设置导出文档时，图片的压缩质量。数字范围为1至12。
    exportOptionsSave.quality = 12;

    // 保存为基线已优化
    exportOptionsSave.formatOptions = FormatOptions.OPTIMIZEDBASELINE;

    // 是否保存成功
    var isSave = false;

    // 保存活动历史记录状态
    var savedState = app.activeDocument.activeHistoryState;

    // 定义单片名字
    var singleName = "{{.SingleName}}";  // 这里传golang变量哦！！！！！！！！！！！
    // 定义折屏单扇的宽和高
    var width = {{.Width}};  // 这里传golang变量哦！！！！！！！！！！！
    var height = {{.Height}};  // 这里传golang变量哦！！！！！！！！！！！
    // 定义一个变量表示几扇
    var num = {{.Number}};  // 这里传golang变量哦！！！！！！！！！！！
    // 是否自动黑边
    var BlackEdge = {{.BlackEdge}}; // 这里传golang变量哦！！！！！！！！！！！

    // 执行主函数
    main();

    // 当你完成了你正在做的任何事情，返回这个状态
    app.activeDocument.activeHistoryState = savedState;

    // 保存成功就加个提示
    if (isSave) {
        createLayer();
    }
}