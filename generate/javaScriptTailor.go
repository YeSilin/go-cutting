package generate

import (
	"fmt"
	"github.com/spf13/viper"
	"github.com/yesilin/go-cutting/tools"
	"strings"
)


// 根据当前文档名选择正确的快捷裁剪脚本
func SelectTailor() {
	var jsx = strings.Builder{}

	jsx.WriteString("// 声明：这是一个调用针对当前文档的自动裁剪脚本\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 判断是否有打开的文件\n")
	jsx.WriteString("if(!documents.length) {\n")
	jsx.WriteString("    alert(\"没有打开的文档，请打开一个文档来运行此脚本！\");\n")
	jsx.WriteString("   // return;\n")
	jsx.WriteString("} else {\n")
	jsx.WriteString("   // 获取当前脚本所在路径\n")
	jsx.WriteString("    var scriptPath = (new File($.fileName)).parent\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 获取当前文档名字\n")
	jsx.WriteString("    var nowName = app.activeDocument.name\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 要运行的脚本路径\n")
	jsx.WriteString("    var runScript = scriptPath+\"/Temp/Tailor_\"+nowName+\".jsx\"\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //alert (runScript)\n")
	jsx.WriteString("    var fileRef = new File(runScript);\n")
	jsx.WriteString("    if(fileRef.exists){    // 如果脚本存在\n")
	jsx.WriteString("        app.load(fileRef);   // 运行脚本\n")
	jsx.WriteString("    }else {// 不存在就运行默认裁剪\n")
	jsx.WriteString("    alert (\"未找到当前文档定制版【-1】脚本，已自动调用默认版脚本！\")\n")
	jsx.WriteString("        app.load(new File(scriptPath+\"/Tailor.jsx\"));\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("}\n")

	// 转成字符串格式
	jsxStr := jsx.String()
	// 71.0 更新 先强制生成的文本写覆盖入目标文件
	tools.CreateFile("Config/JSX/SelectTailor.jsx", jsxStr)


}

//通用的优化另存
func Tailor() {
	var jsx = strings.Builder{}

	jsx.WriteString("// 定义一个函数用来设置黑边\n")
	jsx.WriteString("function addEdge(){\n")
	jsx.WriteString("    // 保存当前背景颜色\n")
	jsx.WriteString("    var nowColor = app.backgroundColor;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 定义一个对象颜色是黑色\n")
	jsx.WriteString("    var black = new SolidColor();\n")
	jsx.WriteString("    black.rgb.hexValue = \"000000\";\n")
	jsx.WriteString("    app.backgroundColor = black;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 获取当前文档的高度与宽度\n")
	jsx.WriteString("    var width = app.activeDocument.width + 0.5;\n")
	jsx.WriteString("    var height = app.activeDocument.height + 0.5;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 重设画布大小\n")
	jsx.WriteString("    app.activeDocument.resizeCanvas(UnitValue (width), UnitValue (height), AnchorPosition.MIDDLECENTER);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 恢复之前的背景颜色\n")
	jsx.WriteString("    app.backgroundColor = nowColor;\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 清理元数据\n")
	jsx.WriteString("function deleteDocumentAncestorsMetadata() {\n")
	jsx.WriteString("   // 清理元数据四步骤\n")
	jsx.WriteString("    if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject(\"lib:AdobeXMPScript\");\n")
	jsx.WriteString("    var xmp = new XMPMeta( activeDocument.xmpMetadata.rawData);\n")
	jsx.WriteString("    // Begone foul Document Ancestors!\n")
	jsx.WriteString("    xmp.deleteProperty(XMPConst.NS_PHOTOSHOP, \"DocumentAncestors\");\n")
	jsx.WriteString("    app.activeDocument.xmpMetadata.rawData = xmp.serialize();\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 全部整合在一起\n")
	jsx.WriteString("function optimized(){\n")
	jsx.WriteString("    // 设置首选项新文档预设单位是厘米，PIXELS是像素\n")
	jsx.WriteString("    app.preferences.rulerUnits = Units.CM;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 新建一个空白图层用于合并\n")
	jsx.WriteString("    app.activeDocument.artLayers.add();\n")
	jsx.WriteString("    // 合并全部可见图层\n")
	jsx.WriteString("    app.activeDocument.mergeVisibleLayers();\n")
	jsx.WriteString("    // 转为背景图层不然添加黑边会无效\n")
	jsx.WriteString("    app.activeDocument.activeLayer.isBackgroundLayer = true\n")
	jsx.WriteString("\n")
	jsx.WriteString("    if (BlackEdge){\n")
	jsx.WriteString("        // 添加黑边\n")
	jsx.WriteString("        addEdge();\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 清理元数据\n")
	jsx.WriteString("    deleteDocumentAncestorsMetadata()\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //定义一个变量[exportOptionsSave]，用来表示导出文档为jpeg格式的设置属性。\n")
	jsx.WriteString("    var exportOptionsSave = new JPEGSaveOptions();\n")
	jsx.WriteString("    //设置导出文档时，图片将被存储为.jpeg格式。\n")
	jsx.WriteString("    exportOptionsSave.format = SaveDocumentType.JPEG;\n")
	jsx.WriteString("    //设置导出文档时，图片的压缩质量。数字范围为1至12。\n")
	jsx.WriteString("    exportOptionsSave.quality = 12;\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 获取当前文档的文件名\n")
	jsx.WriteString("    var name = app.activeDocument.name\n")
	jsx.WriteString("    var TmpFile1 = new File(\"~/Desktop/YSLCC/\"+name);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // saveAs( 文件, 选项, 作为副本, 扩展名大小写 )\n")
	jsx.WriteString("    //调用[document]的[saveAs]另存方法，使用上面设置的各种参数，将当前文档导出并转换为JPEG格式的文档\n")
	jsx.WriteString("    app.activeDocument.saveAs(TmpFile1.saveDlg(\"优化另存为\" , \"JPEG Files: *.jpg\"), exportOptionsSave, true, Extension.LOWERCASE);\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 判断是否有打开的文件\n")
	jsx.WriteString("if(!documents.length) {\n")
	jsx.WriteString("    alert(\"没有打开的文档，请打开一个文档来运行此脚本！\");\n")
	jsx.WriteString("   // return;\n")
	jsx.WriteString("} else {\n")
	jsx.WriteString("    // 是否自动黑边\n")
	jsx.WriteString(fmt.Sprintf("    var BlackEdge = %t;   // 这里传golang变量哦！！！！！！！！！！！！！！\n", viper.GetBool("blackEdge")))
	jsx.WriteString("\n")
	jsx.WriteString("    // 保存开始的历史记录状态\n")
	jsx.WriteString("    var savedState = app.activeDocument.activeHistoryState;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 如果出错就返回最开始\n")
	jsx.WriteString("    try{\n")
	jsx.WriteString("        // 生成历史记录\n")
	jsx.WriteString("        app.activeDocument.suspendHistory(\"优化另存\", \"optimized()\");\n")
	jsx.WriteString("    }catch(error){\n")
	jsx.WriteString("         // 忽略错误\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("    // 当你完成了你正在做的任何事情，返回这个状态\n")
	jsx.WriteString("    app.activeDocument.activeHistoryState = savedState;\n")
	jsx.WriteString("}\n")

	// 转成字符串格式
	jsxStr := jsx.String()
	// 71.0 更新 先强制生成的文本写覆盖入目标文件
	tools.CreateFile("Config/JSX/Tailor.jsx", jsxStr)
}

// 生成大部分框架的自动裁剪
func Tailor0(frameName string) {
	var jsx = strings.Builder{}

	jsx.WriteString("// 定义一个函数用来设置黑边\n")
	jsx.WriteString("function addEdge(){\n")
	jsx.WriteString("    // 保存当前背景颜色\n")
	jsx.WriteString("    var nowColor = app.backgroundColor;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 定义一个对象颜色是黑色\n")
	jsx.WriteString("    var black = new SolidColor();\n")
	jsx.WriteString("    black.rgb.hexValue = \"000000\";\n")
	jsx.WriteString("    app.backgroundColor = black;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 获取当前文档的高度与宽度\n")
	jsx.WriteString("    var width = app.activeDocument.width + 0.5;\n")
	jsx.WriteString("    var height = app.activeDocument.height + 0.5;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 重设画布大小\n")
	jsx.WriteString("    app.activeDocument.resizeCanvas(UnitValue (width), UnitValue (height), AnchorPosition.MIDDLECENTER);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 恢复之前的背景颜色\n")
	jsx.WriteString("    app.backgroundColor = nowColor;\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 清理元数据\n")
	jsx.WriteString("function deleteDocumentAncestorsMetadata() {\n")
	jsx.WriteString("   // 清理元数据四步骤\n")
	jsx.WriteString("    if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject(\"lib:AdobeXMPScript\");\n")
	jsx.WriteString("    var xmp = new XMPMeta( activeDocument.xmpMetadata.rawData);\n")
	jsx.WriteString("    // Begone foul Document Ancestors!\n")
	jsx.WriteString("    xmp.deleteProperty(XMPConst.NS_PHOTOSHOP, \"DocumentAncestors\");\n")
	jsx.WriteString("    app.activeDocument.xmpMetadata.rawData = xmp.serialize();\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 全部整合在一起\n")
	jsx.WriteString("function optimized(){\n")
	jsx.WriteString("    // 设置首选项新文档预设单位是厘米，PIXELS是像素\n")
	jsx.WriteString("    app.preferences.rulerUnits = Units.CM;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 新建一个空白图层用于合并\n")
	jsx.WriteString("    app.activeDocument.artLayers.add();\n")
	jsx.WriteString("    // 合并全部可见图层\n")
	jsx.WriteString("    app.activeDocument.mergeVisibleLayers();\n")
	jsx.WriteString("    // 转为背景图层不然添加黑边会无效\n")
	jsx.WriteString("    app.activeDocument.activeLayer.isBackgroundLayer = true\n")
	jsx.WriteString("\n")
	jsx.WriteString("    if (BlackEdge){\n")
	jsx.WriteString("        // 添加黑边\n")
	jsx.WriteString("        addEdge();\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 清理元数据\n")
	jsx.WriteString("    deleteDocumentAncestorsMetadata()\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //定义一个变量[exportOptionsSave]，用来表示导出文档为jpeg格式的设置属性。\n")
	jsx.WriteString("    var exportOptionsSave = new JPEGSaveOptions();\n")
	jsx.WriteString("    //设置导出文档时，图片将被存储为.jpeg格式。\n")
	jsx.WriteString("    exportOptionsSave.format = SaveDocumentType.JPEG;\n")
	jsx.WriteString("    //设置导出文档时，图片的压缩质量。数字范围为1至12。\n")
	jsx.WriteString("    exportOptionsSave.quality = 12;\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 获取当前文档的文件名\n")
	jsx.WriteString("    var name = app.activeDocument.name\n")
	jsx.WriteString("    var TmpFile1 = new File(\"~/Desktop/GoCutting/\"+name);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // saveAs( 文件, 选项, 作为副本, 扩展名大小写 )\n")
	jsx.WriteString("    //调用[document]的[saveAs]另存方法，使用上面设置的各种参数，将当前文档导出并转换为JPEG格式的文档\n")
	jsx.WriteString("    app.activeDocument.saveAs(TmpFile1.saveDlg(\"优化另存为\" , \"JPEG Files: *.jpg\"), exportOptionsSave, true, Extension.LOWERCASE);\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 判断是否有打开的文件\n")
	jsx.WriteString("if(!documents.length) {\n")
	jsx.WriteString("    alert(\"没有打开的文档，请打开一个文档来运行此脚本！\");\n")
	jsx.WriteString("   // return;\n")
	jsx.WriteString("} else {\n")
	jsx.WriteString("    // 是否自动黑边\n")
	jsx.WriteString(fmt.Sprintf("    var BlackEdge = %t;   // 这里传golang变量哦！！！！！！！！！！！！！！\n", viper.GetBool("blackEdge")))
	jsx.WriteString("\n")
	jsx.WriteString("    // 保存开始的历史记录状态\n")
	jsx.WriteString("    var savedState = app.activeDocument.activeHistoryState;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 如果出错就返回最开始\n")
	jsx.WriteString("    try{\n")
	jsx.WriteString("        // 生成历史记录\n")
	jsx.WriteString("        app.activeDocument.suspendHistory(\"优化另存\", \"optimized()\");\n")
	jsx.WriteString("    }catch(error){\n")
	jsx.WriteString("         // 忽略错误\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("    // 当你完成了你正在做的任何事情，返回这个状态\n")
	jsx.WriteString("    app.activeDocument.activeHistoryState = savedState;\n")
	jsx.WriteString("}\n")

	// 转成字符串格式
	jsxStr := jsx.String()
	// 71.0 更新 先强制生成的文本写覆盖入目标文件
	tools.CreateFile(fmt.Sprintf("Config/JSX/Temp/Tailor_%s.jsx",frameName), jsxStr)
}

// 生成中间大两边小的自动裁剪js
// @param width 传入中间宽度
// @param height 传入高度
// @param hollowOut 传入镂空
func Tailor3(width, height, hollowOut float64, frameName string) {
	var jsx = strings.Builder{}

	jsx.WriteString("// 清理元数据\n")
	jsx.WriteString("function deleteDocumentAncestorsMetadata() {\n")
	jsx.WriteString("   // 清理元数据四步骤\n")
	jsx.WriteString("    if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject(\"lib:AdobeXMPScript\");\n")
	jsx.WriteString("    var xmp = new XMPMeta( activeDocument.xmpMetadata.rawData);\n")
	jsx.WriteString("    // Begone foul Document Ancestors!\n")
	jsx.WriteString("    xmp.deleteProperty(XMPConst.NS_PHOTOSHOP, \"DocumentAncestors\");\n")
	jsx.WriteString("    app.activeDocument.xmpMetadata.rawData = xmp.serialize();\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 定义一个函数用来设置黑边\n")
	jsx.WriteString("function addEdge(){\n")
	jsx.WriteString("    // 保存当前背景颜色\n")
	jsx.WriteString("    var nowColor = app.backgroundColor;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 定义一个对象颜色是黑色\n")
	jsx.WriteString("    var black = new SolidColor();\n")
	jsx.WriteString("    black.rgb.hexValue = \"000000\";\n")
	jsx.WriteString("    app.backgroundColor = black;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 获取当前文档的高度与宽度\n")
	jsx.WriteString("    var width = app.activeDocument.width + 0.5;\n")
	jsx.WriteString("    var height = app.activeDocument.height + 0.5;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 重设画布大小\n")
	jsx.WriteString("    app.activeDocument.resizeCanvas(UnitValue (width), UnitValue (height), AnchorPosition.MIDDLECENTER);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 恢复之前的背景颜色\n")
	jsx.WriteString("    app.backgroundColor = nowColor;\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 合并图层用于提速\n")
	jsx.WriteString("function speedUp() {\n")
	jsx.WriteString("     // 设置首选项新文档预设单位是厘米，PIXELS是像素\n")
	jsx.WriteString("	app.preferences.rulerUnits = Units.CM;\n")
	jsx.WriteString("     // 新建一个空白图层用于合并\n")
	jsx.WriteString("	app.activeDocument.artLayers.add();\n")
	jsx.WriteString("	// 合并全部可见图层\n")
	jsx.WriteString("	app.activeDocument.mergeVisibleLayers();\n")
	jsx.WriteString("    // 转为背景图层不然添加黑边会无效\n")
	jsx.WriteString("    app.activeDocument.activeLayer.isBackgroundLayer = true\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 用于裁剪另存\n")
	jsx.WriteString("function optimized(x1,y1,x2,y2,saveName){\n")
	jsx.WriteString("    var bounds0 = [x1, y1, x2, y2];\n")
	jsx.WriteString("    document.crop(bounds0, 0);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    if (BlackEdge){\n")
	jsx.WriteString("        // 添加黑边\n")
	jsx.WriteString("        addEdge();\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("    var tempName = \"~/Desktop/YSLCC/\" + saveName;\n")
	jsx.WriteString("    // 裁剪之后进行保存的位置和你想要的默认名称\n")
	jsx.WriteString("    var TmpFile = new File(tempName);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // saveAs( 文件, 选项, 作为副本, 扩展名大小写 )\n")
	jsx.WriteString("    //调用[document]的[saveAs]另存方法，使用上面设置的各种参数，将当前文档导出并转换为JPEG格式的文档。\n")
	jsx.WriteString("    document.saveAs(TmpFile.saveDlg(\"优化另存\", \"JPEG Files: *.JPG\"), exportOptionsSave, true, Extension.LOWERCASE);\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 判断是否有打开的文件\n")
	jsx.WriteString("if(!documents.length) {\n")
	jsx.WriteString("    alert(\"没有打开的文档，请打开一个文档来运行此脚本！\");\n")
	jsx.WriteString("} else {\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 是否自动黑边\n")
	jsx.WriteString(fmt.Sprintf("    var BlackEdge = %t;   // 这里传golang变量哦！！！！！！！！！！！！！！\n", viper.GetBool("blackEdge")))
	jsx.WriteString("    // 中间大两边小的镂空均是\n")
	jsx.WriteString(fmt.Sprintf("    var hollowOut = %.2f;   // 这里传golang变量哦！！！！！！！！！！！！！！\n", hollowOut))
	jsx.WriteString("    // 中间大两边小的中间宽\n")
	jsx.WriteString(fmt.Sprintf("    var width = %.2f;    // 这里传golang变量哦！！！！！！！！！！！！！！\n", width))
	jsx.WriteString("    // 中间大两边小的高\n")
	jsx.WriteString(fmt.Sprintf("    var height = %.2f;    // 这里传golang变量哦！！！！！！！！！！！！！！\n", height))
	jsx.WriteString("\n")
	jsx.WriteString("    // 为历史定义的变量\n")
	jsx.WriteString("    var idslct = charIDToTypeID( \"slct\" );\n")
	jsx.WriteString("    var idnull = charIDToTypeID( \"null\" );\n")
	jsx.WriteString("    var idHstS = charIDToTypeID( \"HstS\" );\n")
	jsx.WriteString("    var idOrdn = charIDToTypeID( \"Ordn\" );\n")
	jsx.WriteString("    var idPrvs = charIDToTypeID( \"Prvs\" );\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 为当前文档定义变量\n")
	jsx.WriteString("    var document = app.activeDocument;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //定义一个变量[exportOptionsSave]，用来表示导出文档为jpeg格式的设置属性。\n")
	jsx.WriteString("    var exportOptionsSave = new JPEGSaveOptions();\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //设置导出文档时，图片将被存储为.jpeg格式。\n")
	jsx.WriteString("    exportOptionsSave.format = SaveDocumentType.JPEG;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //设置导出文档时，图片的压缩质量。数字范围为1至12。\n")
	jsx.WriteString("    exportOptionsSave.quality = 12;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 保存开始状态\n")
	jsx.WriteString("    var savedState = app.activeDocument.activeHistoryState;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 生成历史记录并调用函数\n")
	jsx.WriteString("    app.activeDocument.suspendHistory(\"性能加速\", \"speedUp()\");\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 清理元数据\n")
	jsx.WriteString("    deleteDocumentAncestorsMetadata()\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 监督异常\n")
	jsx.WriteString("    try{\n")
	jsx.WriteString("        // 生成历史记录并调用函数\n")
	jsx.WriteString("        var tempName = \"订单编号_左右画布(中间大两边小)_左_\"+hollowOut+\"x\"+height;\n")
	jsx.WriteString("        app.activeDocument.suspendHistory(\"优化另存\", \"optimized(0,0,hollowOut,height,tempName)\");\n")
	jsx.WriteString("        // 返回上一级历史\n")
	jsx.WriteString("        var ref = new ActionReference();\n")
	jsx.WriteString("        var desc = new ActionDescriptor();\n")
	jsx.WriteString("        ref.putEnumerated( idHstS, idOrdn, idPrvs );\n")
	jsx.WriteString("        desc.putReference( idnull, ref );\n")
	jsx.WriteString("        executeAction( idslct, desc, DialogModes.NO );\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("        // 生成历史记录并调用函数\n")
	jsx.WriteString("        tempName = \"订单编号_左右画布(中间大两边小)_中_\"+width+\"x\"+height;\n")
	jsx.WriteString("        app.activeDocument.suspendHistory(\"优化另存\", \"optimized(hollowOut,0,hollowOut+width,height,tempName)\");\n")
	jsx.WriteString("        // 返回上一级历史\n")
	jsx.WriteString("        var ref = new ActionReference();\n")
	jsx.WriteString("        var desc = new ActionDescriptor();\n")
	jsx.WriteString("        ref.putEnumerated( idHstS, idOrdn, idPrvs );\n")
	jsx.WriteString("        desc.putReference( idnull, ref );\n")
	jsx.WriteString("        executeAction( idslct, desc, DialogModes.NO );\n")
	jsx.WriteString("\n")
	jsx.WriteString("        // 生成历史记录并调用函数\n")
	jsx.WriteString("        tempName = \"订单编号_左右画布(中间大两边小)_右_\"+hollowOut+\"x\"+height;\n")
	jsx.WriteString("        app.activeDocument.suspendHistory(\"优化另存\", \"optimized(hollowOut+width,0,hollowOut+width+hollowOut,height,tempName)\");\n")
	jsx.WriteString("    }catch(error){\n")
	jsx.WriteString("        //发生错误执行的代码\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("    // 当你完成了你正在做的任何事情，返回这个状态\n")
	jsx.WriteString("    app.activeDocument.activeHistoryState = savedState;\n")
	jsx.WriteString("}\n")

	// 转成字符串格式
	jsxStr := jsx.String()
	// 71.0 更新 先强制生成的文本写覆盖入目标文件
	tools.CreateFile(fmt.Sprintf("Config/JSX/Temp/Tailor_%s.jsx",frameName), jsxStr)

}

//生成折屏的自动裁剪js
//@param width 传入单扇宽度
//@param height 传入高度
//@param number 传入扇数
func Tailor6(width, height, number float64,frameName, singleName string) {
	var jsx = strings.Builder{}

	jsx.WriteString("//var str = \"js实现用{two}自符串替换占位符{two} {three}  {one} \".format({one: \"I\",two: \"LOVE\",three: \"YOU\"});\n")
	jsx.WriteString("//var str2 = \"js实现用{1}自符串替换占位符{1} {2}  {0} \".format(\"I\",\"LOVE\",\"YOU\");\n")
	jsx.WriteString("String.prototype.format = function () {\n")
	jsx.WriteString("    if (arguments.length == 0) return this;\n")
	jsx.WriteString("    var param = arguments[0];\n")
	jsx.WriteString("    var s = this;\n")
	jsx.WriteString("    if (typeof (param) == 'object') {\n")
	jsx.WriteString("        for (var key in param)\n")
	jsx.WriteString("            s = s.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"g\"), param[key]);\n")
	jsx.WriteString("        return s;\n")
	jsx.WriteString("    } else {\n")
	jsx.WriteString("        for (var i = 0; i < arguments.length; i++)\n")
	jsx.WriteString("            s = s.replace(new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\"), arguments[i]);\n")
	jsx.WriteString("        return s;\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("};\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("/* 质朴长存法 整数前面补零 */\n")
	jsx.WriteString("function pad(num, n) {\n")
	jsx.WriteString("    var len = num.toString().length;\n")
	jsx.WriteString("    while (len < n) {\n")
	jsx.WriteString("        num = \"0\" + num;\n")
	jsx.WriteString("        len++;\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("    return num;\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 定义一个函数用来设置黑边\n")
	jsx.WriteString("function addEdge() {\n")
	jsx.WriteString("    // 保存当前背景颜色\n")
	jsx.WriteString("    var nowColor = app.backgroundColor;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 定义一个对象颜色是黑色\n")
	jsx.WriteString("    var black = new SolidColor();\n")
	jsx.WriteString("    black.rgb.hexValue = \"000000\";\n")
	jsx.WriteString("    app.backgroundColor = black;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 获取当前文档的高度与宽度\n")
	jsx.WriteString("    var width = app.activeDocument.width + 0.5;\n")
	jsx.WriteString("    var height = app.activeDocument.height + 0.5;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 重设画布大小\n")
	jsx.WriteString("    app.activeDocument.resizeCanvas(UnitValue(width), UnitValue(height), AnchorPosition.MIDDLECENTER);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 恢复之前的背景颜色\n")
	jsx.WriteString("    app.backgroundColor = nowColor;\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 清理元数据\n")
	jsx.WriteString("function deleteDocumentAncestorsMetadata() {\n")
	jsx.WriteString("    // 清理元数据四步骤\n")
	jsx.WriteString("    if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject(\"lib:AdobeXMPScript\");\n")
	jsx.WriteString("    var xmp = new XMPMeta(activeDocument.xmpMetadata.rawData);\n")
	jsx.WriteString("    // Begone foul Document Ancestors!\n")
	jsx.WriteString("    xmp.deleteProperty(XMPConst.NS_PHOTOSHOP, \"DocumentAncestors\");\n")
	jsx.WriteString("    app.activeDocument.xmpMetadata.rawData = xmp.serialize();\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 合并图层用于提速\n")
	jsx.WriteString("function speedUp() {\n")
	jsx.WriteString("    // 设置首选项新文档预设单位是厘米，PIXELS是像素\n")
	jsx.WriteString("    app.preferences.rulerUnits = Units.CM;\n")
	jsx.WriteString("    // 新建一个空白图层用于合并\n")
	jsx.WriteString("    app.activeDocument.artLayers.add();\n")
	jsx.WriteString("    // 合并全部可见图层\n")
	jsx.WriteString("    app.activeDocument.mergeVisibleLayers();\n")
	jsx.WriteString("    // 转为背景图层不然添加黑边会无效\n")
	jsx.WriteString("    app.activeDocument.activeLayer.isBackgroundLayer = true\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 这是负责裁剪的函数\n")
	jsx.WriteString("function optimized(x1, y1, x2, y2, fileName) {\n")
	jsx.WriteString("    var bounds = [x1, y1, x2, y2];\n")
	jsx.WriteString("    app.activeDocument.crop(bounds, 0);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    if (BlackEdge) {\n")
	jsx.WriteString("        // 添加黑边\n")
	jsx.WriteString("        addEdge();\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 裁剪之后进行保存的位置和你想要的默认名称\n")
	jsx.WriteString("    var name = \"~/Desktop/GoCutting/\" + fileName;\n")
	jsx.WriteString("    var TmpFile = new File(name);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // saveAs( 文件, 选项, 作为副本, 扩展名大小写 )\n")
	jsx.WriteString("    //调用[document]的[saveAs]另存方法，使用上面设置的各种参数，将当前文档导出并转换为JPEG格式的文档。\n")
	jsx.WriteString("    app.activeDocument.saveAs(TmpFile.saveDlg(\"优化另存\", \"JPEG Files: *.JPG\"), exportOptionsSave, true, Extension.LOWERCASE);\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 判断是否有打开的文件\n")
	jsx.WriteString("if (!documents.length) {\n")
	jsx.WriteString("    alert(\"没有打开的文档，请打开一个文档来运行此脚本！\");\n")
	jsx.WriteString("} else {\n")
	jsx.WriteString("    // 为历史定义的变量\n")
	jsx.WriteString("    var idslct = charIDToTypeID(\"slct\");\n")
	jsx.WriteString("    var idnull = charIDToTypeID(\"null\");\n")
	jsx.WriteString("    var idHstS = charIDToTypeID(\"HstS\");\n")
	jsx.WriteString("    var idOrdn = charIDToTypeID(\"Ordn\");\n")
	jsx.WriteString("    var idPrvs = charIDToTypeID(\"Prvs\");\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //定义一个变量[exportOptionsSave]，用来表示导出文档为jpeg格式的设置属性。\n")
	jsx.WriteString("    var exportOptionsSave = new JPEGSaveOptions();\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //设置导出文档时，图片将被存储为.jpeg格式。\n")
	jsx.WriteString("    exportOptionsSave.format = SaveDocumentType.JPEG;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //设置导出文档时，图片的压缩质量。数字范围为1至12。\n")
	jsx.WriteString("    exportOptionsSave.quality = 12;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 保存活动历史记录状态\n")
	jsx.WriteString("    var savedState = app.activeDocument.activeHistoryState;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 生成历史记录并调用函数\n")
	jsx.WriteString("    app.activeDocument.suspendHistory(\"性能加速\", \"speedUp()\");\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 清除元数据\n")
	jsx.WriteString("    deleteDocumentAncestorsMetadata();\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 定义单片名字\n")
	jsx.WriteString(fmt.Sprintf("    var singleName = \"%s\";  // 这里传golang变量哦！！！！！！！！！！！\n",singleName))
	jsx.WriteString("    // 定义折屏单扇的宽和高\n")
	jsx.WriteString(fmt.Sprintf("    var width = %f;  // 这里传golang变量哦！！！！！！！！！！！\n", width))
	jsx.WriteString(fmt.Sprintf("    var height = %f;  // 这里传golang变量哦！！！！！！！！！！！\n", height))
	jsx.WriteString("    // 定义一个变量表示几扇\n")
	jsx.WriteString(fmt.Sprintf("    var num = %.0f;  // 这里传golang变量哦！！！！！！！！！！！\n", number))
	jsx.WriteString("    // 是否自动黑边\n")
	jsx.WriteString(fmt.Sprintf("    var BlackEdge = %t; // 这里传golang变量哦！！！！！！！！！！！\n", viper.GetBool("blackEdge")))
	jsx.WriteString("\n")
	jsx.WriteString("    // 监控异常\n")
	jsx.WriteString("    try {\n")
	jsx.WriteString("        for (i = 0; i < num; i++) {\n")
	jsx.WriteString("            // 生成历史记录并调用函数\n")
	jsx.WriteString("            var fileName = \"{0}_{1}_\".format(singleName,pad(i + 1, 2)) + width + \"x\" + height;\n")
	jsx.WriteString("            app.activeDocument.suspendHistory(\"优化另存\", \"optimized(width*i, 0, width*(i+1), height, fileName)\");\n")
	jsx.WriteString("\n")
	jsx.WriteString("            // 返回上一级历史\n")
	jsx.WriteString("            var ref = new ActionReference();\n")
	jsx.WriteString("            var desc = new ActionDescriptor();\n")
	jsx.WriteString("            ref.putEnumerated(idHstS, idOrdn, idPrvs);\n")
	jsx.WriteString("            desc.putReference(idnull, ref);\n")
	jsx.WriteString("            executeAction(idslct, desc, DialogModes.NO);\n")
	jsx.WriteString("        }\n")
	jsx.WriteString("    } catch (error) {\n")
	jsx.WriteString("        //发生错误执行的代码\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("    // 当你完成了你正在做的任何事情，返回这个状态\n")
	jsx.WriteString("    app.activeDocument.activeHistoryState = savedState;\n")
	jsx.WriteString("}\n")

	// 转成字符串格式
	jsxStr := jsx.String()
	// 71.0 更新 先强制生成的文本写覆盖入目标文件
	tools.CreateFile(fmt.Sprintf("Config/JSX/Temp/Tailor_%s.jsx",frameName), jsxStr)
}

// 生成多座屏的自动裁剪js
// @param width 传入中间宽度
// @param height 传入高度
// @param hollowOut 传入镂空
func Tailor7(widthSlice, heightSlice []float64, heightMax float64,frameName string) {
	var jsx = strings.Builder{}

	jsx.WriteString("//var str = \"js实现用{two}自符串替换占位符{two} {three}  {one} \".format({one: \"I\",two: \"LOVE\",three: \"YOU\"});\n")
	jsx.WriteString("//var str2 = \"js实现用{1}自符串替换占位符{1} {2}  {0} \".format(\"I\",\"LOVE\",\"YOU\");\n")
	jsx.WriteString("String.prototype.format = function () {\n")
	jsx.WriteString("    if (arguments.length == 0) return this;\n")
	jsx.WriteString("    var param = arguments[0];\n")
	jsx.WriteString("    var s = this;\n")
	jsx.WriteString("    if (typeof (param) == 'object') {\n")
	jsx.WriteString("        for (var key in param)\n")
	jsx.WriteString("            s = s.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"g\"), param[key]);\n")
	jsx.WriteString("        return s;\n")
	jsx.WriteString("    } else {\n")
	jsx.WriteString("        for (var i = 0; i < arguments.length; i++)\n")
	jsx.WriteString("            s = s.replace(new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\"), arguments[i]);\n")
	jsx.WriteString("        return s;\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("};\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("/* 质朴长存法 整数前面补零 */\n")
	jsx.WriteString("function pad(num, n) {\n")
	jsx.WriteString("    var len = num.toString().length;\n")
	jsx.WriteString("    while (len < n) {\n")
	jsx.WriteString("        num = \"0\" + num;\n")
	jsx.WriteString("        len++;\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("    return num;\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 定义一个函数用来设置黑边\n")
	jsx.WriteString("function addEdge() {\n")
	jsx.WriteString("    // 保存当前背景颜色\n")
	jsx.WriteString("    var nowColor = app.backgroundColor;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 定义一个对象颜色是黑色\n")
	jsx.WriteString("    var black = new SolidColor();\n")
	jsx.WriteString("    black.rgb.hexValue = \"000000\";\n")
	jsx.WriteString("    app.backgroundColor = black;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 获取当前文档的高度与宽度\n")
	jsx.WriteString("    var width = app.activeDocument.width + 0.5;\n")
	jsx.WriteString("    var height = app.activeDocument.height + 0.5;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 重设画布大小\n")
	jsx.WriteString("    app.activeDocument.resizeCanvas(UnitValue(width), UnitValue(height), AnchorPosition.MIDDLECENTER);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 恢复之前的背景颜色\n")
	jsx.WriteString("    app.backgroundColor = nowColor;\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 清理元数据\n")
	jsx.WriteString("function deleteDocumentAncestorsMetadata() {\n")
	jsx.WriteString("    // 清理元数据四步骤\n")
	jsx.WriteString("    if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject(\"lib:AdobeXMPScript\");\n")
	jsx.WriteString("    var xmp = new XMPMeta(activeDocument.xmpMetadata.rawData);\n")
	jsx.WriteString("    // Begone foul Document Ancestors!\n")
	jsx.WriteString("    xmp.deleteProperty(XMPConst.NS_PHOTOSHOP, \"DocumentAncestors\");\n")
	jsx.WriteString("    app.activeDocument.xmpMetadata.rawData = xmp.serialize();\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 合并图层用于提速\n")
	jsx.WriteString("function speedUp() {\n")
	jsx.WriteString("    // 设置首选项新文档预设单位是厘米，PIXELS是像素\n")
	jsx.WriteString("    app.preferences.rulerUnits = Units.CM;\n")
	jsx.WriteString("    // 新建一个空白图层用于合并\n")
	jsx.WriteString("    app.activeDocument.artLayers.add();\n")
	jsx.WriteString("    // 合并全部可见图层\n")
	jsx.WriteString("    app.activeDocument.mergeVisibleLayers();\n")
	jsx.WriteString("    // 转为背景图层不然添加黑边会无效\n")
	jsx.WriteString("    app.activeDocument.activeLayer.isBackgroundLayer = true\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 这是负责裁剪的函数\n")
	jsx.WriteString("function optimized(x1, y1, x2, y2, fileName) {\n")
	jsx.WriteString("    var bounds = [x1, y1, x2, y2];\n")
	jsx.WriteString("    app.activeDocument.crop(bounds, 0);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    if (BlackEdge) {\n")
	jsx.WriteString("        // 添加黑边\n")
	jsx.WriteString("        addEdge();\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 裁剪之后进行保存的位置和你想要的默认名称\n")
	jsx.WriteString("    var name = \"~/Desktop/GoCutting/\" + fileName;\n")
	jsx.WriteString("    var TmpFile = new File(name);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // saveAs( 文件, 选项, 作为副本, 扩展名大小写 )\n")
	jsx.WriteString("    //调用[document]的[saveAs]另存方法，使用上面设置的各种参数，将当前文档导出并转换为JPEG格式的文档。\n")
	jsx.WriteString("    app.activeDocument.saveAs(TmpFile.saveDlg(\"优化另存\", \"JPEG Files: *.JPG\"), exportOptionsSave, true, Extension.LOWERCASE);\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 判断是否有打开的文件\n")
	jsx.WriteString("if (!documents.length) {\n")
	jsx.WriteString("    alert(\"没有打开的文档，请打开一个文档来运行此脚本！\");\n")
	jsx.WriteString("} else {\n")
	jsx.WriteString("    // 为历史定义的变量\n")
	jsx.WriteString("    var idslct = charIDToTypeID(\"slct\");\n")
	jsx.WriteString("    var idnull = charIDToTypeID(\"null\");\n")
	jsx.WriteString("    var idHstS = charIDToTypeID(\"HstS\");\n")
	jsx.WriteString("    var idOrdn = charIDToTypeID(\"Ordn\");\n")
	jsx.WriteString("    var idPrvs = charIDToTypeID(\"Prvs\");\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //定义一个变量[exportOptionsSave]，用来表示导出文档为jpeg格式的设置属性。\n")
	jsx.WriteString("    var exportOptionsSave = new JPEGSaveOptions();\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //设置导出文档时，图片将被存储为.jpeg格式。\n")
	jsx.WriteString("    exportOptionsSave.format = SaveDocumentType.JPEG;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //设置导出文档时，图片的压缩质量。数字范围为1至12。\n")
	jsx.WriteString("    exportOptionsSave.quality = 12;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 保存活动历史记录状态\n")
	jsx.WriteString("    var savedState = app.activeDocument.activeHistoryState;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 生成历史记录并调用函数\n")
	jsx.WriteString("    app.activeDocument.suspendHistory(\"性能加速\", \"speedUp()\");\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 清除元数据\n")
	jsx.WriteString("    deleteDocumentAncestorsMetadata();\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 用数组定义多座屏的宽和高\n")
	jsx.WriteString(fmt.Sprintf("    var widthArray = %s;   // 这里传golang排版好的字符串哦！！！！！！！！！！！\n", tools.ToJsArray(widthSlice)))
	jsx.WriteString(fmt.Sprintf("    var heightArray = %s;  // 这里传golang排版好的字符串哦！！！！！！！！！！！\n", tools.ToJsArray(heightSlice)))
	jsx.WriteString("    // 最高的高度哦\n")
	jsx.WriteString(fmt.Sprintf("    var heightMax = %f;        // 这里传golang变量哦！！！！！！！！！！！\n", heightMax))
	jsx.WriteString(fmt.Sprintf("    var BlackEdge = %t;    // 这里传golang变量哦！！！！！！！！！！！\n", viper.GetBool("blackEdge")))
	jsx.WriteString("\n")
	jsx.WriteString("    // 监控异常\n")
	jsx.WriteString("    try {\n")
	jsx.WriteString("        for (i = 0; i < widthArray.length; i++) {\n")
	jsx.WriteString("            // 求出x1 坐标的值\n")
	jsx.WriteString("            var x1 = 0;\n")
	jsx.WriteString("            for (j = 0; j < i; j++) {\n")
	jsx.WriteString("                x1 += widthArray[j]\n")
	jsx.WriteString("            }\n")
	jsx.WriteString("\n")
	jsx.WriteString("            // 求出y1 坐标的值\n")
	jsx.WriteString("            var y1 = heightMax - heightArray[i];\n")
	jsx.WriteString("\n")
	jsx.WriteString("            // 求出x2 坐标的值\n")
	jsx.WriteString("            var x2 = 0;\n")
	jsx.WriteString("            for (k = 0; k < i + 1; k++) {\n")
	jsx.WriteString("                x2 += widthArray[k]\n")
	jsx.WriteString("            }\n")
	jsx.WriteString("\n")
	jsx.WriteString("            // 求出y2 坐标的值\n")
	jsx.WriteString("            var y2 = heightMax;\n")
	jsx.WriteString("\n")
	jsx.WriteString(fmt.Sprintf("            var fileName = \"%s座屏_{0}_\".format(pad(i + 1, 2)) + widthArray[i] + \"x\" + heightArray[i];  // 这里传golang变量哦！！！！！！！！！！！\n",
		tools.Transfer(len(widthSlice))))
	jsx.WriteString("            // 生成历史记录并调用函数\n")
	jsx.WriteString("            app.activeDocument.suspendHistory(\"优化另存\", \"optimized(x1, y1, x2, y2, fileName)\");\n")
	jsx.WriteString("\n")
	jsx.WriteString("            // 返回上一级历史\n")
	jsx.WriteString("            var ref = new ActionReference();\n")
	jsx.WriteString("            var desc = new ActionDescriptor();\n")
	jsx.WriteString("            ref.putEnumerated(idHstS, idOrdn, idPrvs);\n")
	jsx.WriteString("            desc.putReference(idnull, ref);\n")
	jsx.WriteString("            executeAction(idslct, desc, DialogModes.NO);\n")
	jsx.WriteString("        }\n")
	jsx.WriteString("    } catch (error) {\n")
	jsx.WriteString("        //发生错误执行的代码\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 当你完成了你正在做的任何事情，返回这个状态\n")
	jsx.WriteString("    app.activeDocument.activeHistoryState = savedState;\n")
	jsx.WriteString("}\n")

	// 转成字符串格式
	jsxStr := jsx.String()
	// 71.0 更新 先强制生成的文本写覆盖入目标文件
	tools.CreateFile(fmt.Sprintf("Config/JSX/Temp/Tailor_%s.jsx",frameName), jsxStr)
}

//生成贴图折屏的自动裁剪js
//@param width 传入单扇宽度
//@param height 传入高度
//@param number 传入扇数
func Tailor3DMap6(width, height, number float64, frameName string) {
	var jsx = strings.Builder{}

	jsx.WriteString("//var str = \"js实现用{two}自符串替换占位符{two} {three}  {one} \".format({one: \"I\",two: \"LOVE\",three: \"YOU\"});\n")
	jsx.WriteString("//var str2 = \"js实现用{1}自符串替换占位符{1} {2}  {0} \".format(\"I\",\"LOVE\",\"YOU\");\n")
	jsx.WriteString("String.prototype.format = function() {\n")
	jsx.WriteString("    if(arguments.length == 0) return this;\n")
	jsx.WriteString("    var param = arguments[0];\n")
	jsx.WriteString("    var s = this;\n")
	jsx.WriteString("    if(typeof(param) == 'object') {\n")
	jsx.WriteString("        for(var key in param)\n")
	jsx.WriteString("        s = s.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"g\"), param[key]);\n")
	jsx.WriteString("        return s;\n")
	jsx.WriteString("    } else {\n")
	jsx.WriteString("        for(var i = 0; i < arguments.length; i++)\n")
	jsx.WriteString("        s = s.replace(new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\"), arguments[i]);\n")
	jsx.WriteString("        return s;\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("};\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("/* 质朴长存法 整数前面补零 */\n")
	jsx.WriteString("function pad(num, n) {\n")
	jsx.WriteString("    var len = num.toString().length;\n")
	jsx.WriteString("    while(len < n) {\n")
	jsx.WriteString("        num = \"0\" + num;\n")
	jsx.WriteString("        len++;\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("    return num;\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 清理元数据\n")
	jsx.WriteString("function deleteDocumentAncestorsMetadata() {\n")
	jsx.WriteString("   // 清理元数据四步骤\n")
	jsx.WriteString("    if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject(\"lib:AdobeXMPScript\");\n")
	jsx.WriteString("    var xmp = new XMPMeta( activeDocument.xmpMetadata.rawData);\n")
	jsx.WriteString("    // Begone foul Document Ancestors!\n")
	jsx.WriteString("    xmp.deleteProperty(XMPConst.NS_PHOTOSHOP, \"DocumentAncestors\");\n")
	jsx.WriteString("    app.activeDocument.xmpMetadata.rawData = xmp.serialize();\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 合并图层用于提速\n")
	jsx.WriteString("function speedUp() {\n")
	jsx.WriteString("     // 设置首选项新文档预设单位是像素，PIXELS是像素\n")
	jsx.WriteString("	app.preferences.rulerUnits = Units.PIXELS;\n")
	jsx.WriteString("     // 新建一个空白图层用于合并\n")
	jsx.WriteString("	app.activeDocument.artLayers.add();\n")
	jsx.WriteString("	// 合并全部可见图层\n")
	jsx.WriteString("	app.activeDocument.mergeVisibleLayers();\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString(" // 这是负责裁剪的函数\n")
	jsx.WriteString("function optimized(x1,y1,x2,y2,i){\n")
	jsx.WriteString("    var bounds = [x1, y1, x2, y2];\n")
	jsx.WriteString("    app.activeDocument.crop(bounds, 0);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 裁剪之后进行保存的位置和你想要的默认名称\n")
	jsx.WriteString("    var name = \"~/Desktop/YSLCC/折屏贴图_Name_{0}\".format(pad(i+1,2));\n")
	jsx.WriteString("    var TmpFile = new File(name);\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // saveAs( 文件, 选项, 作为副本, 扩展名大小写 )\n")
	jsx.WriteString("    //调用[document]的[saveAs]另存方法，使用上面设置的各种参数，将当前文档导出并转换为JPEG格式的文档。\n")
	jsx.WriteString("    app.activeDocument.saveAs(TmpFile.saveDlg(\"优化另存\", \"JPEG Files: *.JPG\"), exportOptionsSave, true, Extension.LOWERCASE);\n")
	jsx.WriteString("}\n")
	jsx.WriteString("\n")
	jsx.WriteString("\n")
	jsx.WriteString("// 判断是否有打开的文件\n")
	jsx.WriteString("if(!documents.length) {\n")
	jsx.WriteString("    alert(\"没有打开的文档，请打开一个文档来运行此脚本！\");\n")
	jsx.WriteString("} else {\n")
	jsx.WriteString("    // 为历史定义的变量\n")
	jsx.WriteString("    var idslct = charIDToTypeID( \"slct\" );\n")
	jsx.WriteString("    var idnull = charIDToTypeID( \"null\" );\n")
	jsx.WriteString("    var idHstS = charIDToTypeID( \"HstS\" );\n")
	jsx.WriteString("    var idOrdn = charIDToTypeID( \"Ordn\" );\n")
	jsx.WriteString("    var idPrvs = charIDToTypeID( \"Prvs\" );\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //定义一个变量[exportOptionsSave]，用来表示导出文档为jpeg格式的设置属性。\n")
	jsx.WriteString("    var exportOptionsSave = new JPEGSaveOptions();\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //设置导出文档时，图片将被存储为.jpeg格式。\n")
	jsx.WriteString("    exportOptionsSave.format = SaveDocumentType.JPEG;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    //设置导出文档时，图片的压缩质量。数字范围为1至12。\n")
	jsx.WriteString("    exportOptionsSave.quality = 12;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 保存活动历史记录状态\n")
	jsx.WriteString("    var savedState = app.activeDocument.activeHistoryState;\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 生成历史记录并调用函数\n")
	jsx.WriteString("    app.activeDocument.suspendHistory(\"性能加速\", \"speedUp()\");\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 清除元数据\n")
	jsx.WriteString("    deleteDocumentAncestorsMetadata()\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 定义折屏单扇的宽和高\n")
	jsx.WriteString(fmt.Sprintf("    var width = %f;  // 这里传golang变量哦！！！！！！！！！！！\n", width*10))
	jsx.WriteString(fmt.Sprintf("    var height = %f;  // 这里传golang变量哦！！！！！！！！！！！\n", height*10))
	jsx.WriteString("    // 定义一个变量表示几扇\n")
	jsx.WriteString(fmt.Sprintf("    var num = %.0f;  // 这里传golang变量哦！！！！！！！！！！！\n", number))
	jsx.WriteString("\n")
	jsx.WriteString("    for( i = 0;  i < num; i++) {\n")
	jsx.WriteString("        // 生成历史记录并调用函数\n")
	jsx.WriteString("        app.activeDocument.suspendHistory(\"优化另存\",\"optimized(width*i, 0, width*(i+1), height, i)\");\n")
	jsx.WriteString("\n")
	jsx.WriteString("        // 返回上一级历史\n")
	jsx.WriteString("        var ref = new ActionReference();\n")
	jsx.WriteString("        var desc = new ActionDescriptor();\n")
	jsx.WriteString("        ref.putEnumerated( idHstS, idOrdn, idPrvs );\n")
	jsx.WriteString("        desc.putReference( idnull, ref );\n")
	jsx.WriteString("        executeAction( idslct, desc, DialogModes.NO );\n")
	jsx.WriteString("    }\n")
	jsx.WriteString("\n")
	jsx.WriteString("    // 当你完成了你正在做的任何事情，返回这个状态\n")
	jsx.WriteString("    app.activeDocument.activeHistoryState = savedState;\n")
	jsx.WriteString("}\n")

	// 转成字符串格式
	jsxStr := jsx.String()
	// 71.0 更新 先强制生成的文本写覆盖入目标文件
	tools.CreateFile(fmt.Sprintf("Config/JSX/Temp/Tailor_%s.jsx",frameName), jsxStr)
}
