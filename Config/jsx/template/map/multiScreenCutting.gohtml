//var str = "js实现用{two}自符串替换占位符{two} {three}  {one} ".format({one: "I",two: "LOVE",three: "YOU"});
//var str2 = "js实现用{1}自符串替换占位符{1} {2}  {0} ".format("I","LOVE","YOU");
String.prototype.format = function () {
    if (arguments.length == 0) return this;
    var param = arguments[0];
    var s = this;
    if (typeof (param) == 'object') {
        for (var key in param)
            s = s.replace(new RegExp("\\{" + key + "\\}", "g"), param[key]);
        return s;
    } else {
        for (var i = 0; i < arguments.length; i++)
            s = s.replace(new RegExp("\\{" + i + "\\}", "g"), arguments[i]);
        return s;
    }
};


// 清理元数据
function deleteDocumentAncestorsMetadata() {
    // 清理元数据四步骤
    if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject("lib:AdobeXMPScript");
    var xmp = new XMPMeta(activeDocument.xmpMetadata.rawData);
    // Begone foul Document Ancestors!
    xmp.deleteProperty(XMPConst.NS_PHOTOSHOP, "DocumentAncestors");
    app.activeDocument.xmpMetadata.rawData = xmp.serialize();
}


// 合并图层用于提速
function speedUp() {
    // 设置首选项新文档预设单位是厘米，PIXELS是像素
    app.preferences.rulerUnits = Units.PIXELS;
    // 新建一个空白图层用于合并
    app.activeDocument.artLayers.add();
    // 合并全部可见图层
    app.activeDocument.mergeVisibleLayers();
    // 转为背景图层不然添加黑边会无效
    app.activeDocument.activeLayer.isBackgroundLayer = true;
}

//  返回上一级函数
function returnUpper() {
    // 为历史定义的变量
    var idslct = charIDToTypeID("slct");
    var idnull = charIDToTypeID("null");
    var idHstS = charIDToTypeID("HstS");
    var idOrdn = charIDToTypeID("Ordn");
    var idPrvs = charIDToTypeID("Prvs");

    // 返回上一级历史
    var ref = new ActionReference();
    var desc = new ActionDescriptor();
    ref.putEnumerated(idHstS, idOrdn, idPrvs);
    desc.putReference(idnull, ref);
    executeAction(idslct, desc, DialogModes.NO);
}


// 这是负责裁剪另存的函数
function optimized(x1, y1, x2, y2, fileName) {
    var bounds = [x1, y1, x2, y2];
    app.activeDocument.crop(bounds, 0);

    // 裁剪之后进行保存的位置和你想要的默认名称
    var name = "~/Desktop/GoCutting/" + fileName;
    var TmpFile = new File(name);

    // saveAs( 文件, 选项, 作为副本, 扩展名大小写 )
    //调用[document]的[saveAs]另存方法，使用上面设置的各种参数，将当前文档导出并转换为JPEG格式的文档。
    app.activeDocument.saveAs(TmpFile.saveDlg("优化另存为", "JPEG Files:*.JPG"), exportOptionsSave, true, Extension.LOWERCASE);
}

// 主函数
function main() {

    // 生成历史记录并调用函数
    app.activeDocument.suspendHistory("性能加速", "speedUp()");

    // 清除元数据
    deleteDocumentAncestorsMetadata();

// 监控异常
try {
    // 开始自动保存文件
    for (i = 0; i < widthArray.length; i++) {
        // 求出x1 坐标的值
        var x1 = 0;
        for (j = 0; j < i; j++) {
            x1 += widthArray[j]
        }

        // 求出y1 坐标的值
        var y1 = heightMax - heightArray[i];

        // 求出x2 坐标的值
        var x2 = 0;
        for (k = 0; k < i + 1; k++) {
            x2 += widthArray[k]
        }

        // 求出y2 坐标的值
        var y2 = heightMax;


        var fileName = "{0}_{1}-{2}_".format(screenName, i + 1, widthArray.length) + widthArray[i] + "x" + heightArray[i]
        // 生成历史记录并调用函数
        app.activeDocument.suspendHistory("优化另存", "optimized(x1, y1, x2, y2, fileName)")
        // 返回上一级历史
        returnUpper();
    }
} catch (error) {
    //发生错误执行的代码
    }
}


// 判断是否有打开的文件
if (!documents.length) {
    alert("没有打开的文档，请打开一个文档来运行此脚本！");
} else {
    // 定义一个变量[exportOptionsSave]，用来表示导出文档为jpeg格式的设置属性。
    var exportOptionsSave = new JPEGSaveOptions();

    // 嵌入彩色配置文件
    exportOptionsSave.embedColorProfile = true;

    // 设置杂边为无
    exportOptionsSave.matte = MatteType.NONE;

    //设置导出文档时，图片的压缩质量。数字范围为1至12。
    exportOptionsSave.quality = 12;

    // 保存为基线已优化
    exportOptionsSave.formatOptions = FormatOptions.OPTIMIZEDBASELINE;


    // 保存活动历史记录状态
    var savedState = app.activeDocument.activeHistoryState;

    // 用数组定义多座屏的宽和高
    var widthArray = {{.WidthSliceJS}};   // 这里传golang排版好的字符串哦！！！！！！！！！！！
    var heightArray = {{.HeightSliceJS}};  // 这里传golang排版好的字符串哦！！！！！！！！！！！
    // 最高的高度哦
    var heightMax = {{.HeightMax}};        // 这里传golang变量哦！！！！！！！！！！！
    var screenName = "{{.ScreenName}}座屏"    // 这里传golang变量哦！！！！！！！！！！！

    // 执行主函数
    main();

    // 当你完成了你正在做的任何事情，返回这个状态
    app.activeDocument.activeHistoryState = savedState;
}